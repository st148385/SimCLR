# Network architecture
input_size = 32 ###     # width and height in input_shapes of both: resnet-50 and input-layers
SimCLRv2_dense = 128
MLP_dense_in = 128
MLP_dense_out = 128     # 128 nach SimCLR paper     #Update: every single one of the dense-layers (3 or 2 depending on version) have 128 neurons on Google's github.
initial_filters = 8
head_input_dim = 128     # 4 * initial_filters or SimCLRv2_dense if SimCLRv2 is used

# Encoder h(•) using custom Resnet
gen_model.Architecture = @ResNet
gen_model.num_layers = 56
gen_model.num_initial_filters = %initial_filters       # 16 will lead to feature dim after glb avg of 16 * 2^2 = 64
gen_model.shortcut_connection=True
gen_model.weight_decay=0.0
gen_model.batch_norm_momentum=0.99
gen_model.batch_norm_epsilon=1e-3
gen_model.batch_norm_center=True
gen_model.batch_norm_scale=True
gen_model.SimCLRv2_dense = %SimCLRv2_dense


# Encoder h(•) using tf.keras.applications.ResNet50
gen_encoderModel.Architecture_encoder = @encoderModel
gen_encoderModel.input_size = %input_size
gen_encoderModel.mlp_dense1 = %MLP_dense_in
gen_encoderModel.mlp_dense2 = %MLP_dense_out

# Projection Head g(•)
gen_headModel.Architecture_head = @headModel
gen_headModel.input_dim = %head_input_dim   #initial_filters * 4
gen_headModel.mlp_dense1 = %MLP_dense_in
gen_headModel.mlp_dense2 = %MLP_dense_out


# Full SimCLR model g(h(•)) using custom Resnet
gen_fullModel.Architecture_fullModel = @fullModel
gen_fullModel.num_layers = 56
gen_fullModel.num_initial_filters = %initial_filters       # 16 will lead to feature dim after glb avg of 16 * 2^2 = 64
gen_fullModel.shortcut_connection=True
gen_fullModel.weight_decay=0.0
gen_fullModel.batch_norm_momentum=0.99
gen_fullModel.batch_norm_epsilon=1e-3
gen_fullModel.batch_norm_center=True
gen_fullModel.batch_norm_scale=True
gen_fullModel.mlp_dense1 = %MLP_dense_in
gen_fullModel.mlp_dense2 = %MLP_dense_out
gen_fullModel.SimCLRv2_dense = %SimCLRv2_dense

# Projection Head with Dense(10)
gen_classifierHead.Architecture_classifierHead = @classifierHead
gen_classifierHead.input_dim = %head_input_dim   #initial_filters * 4
gen_classifierHead.mlp_dense1 = %MLP_dense_in
gen_classifierHead.mlp_dense2 = %MLP_dense_out